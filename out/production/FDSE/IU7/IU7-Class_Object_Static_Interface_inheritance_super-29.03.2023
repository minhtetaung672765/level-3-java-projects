 package IU7;

//Using Static variable and Static method with return type with argument 
// Triangle

class Triangle1
{
    //Area of Triangle
    // 1/2* Base * Height

    //state or attribute
    static double base;    //instance variable or global or attibute
    static double height;
    static double area;

    //Behaviour or Method  // instance method  or non static method
    public static double areaTriangle(double base1,double height1)  // with return type with arg or parameter    
    {
        base=base1;   //this keyword is point the current value   
         height=height1;                                             

        area=(base1*height1)/2;  // formula                         

        return area;      //return type                            

    }


}

Inheritance

package Inhertiance;

class Employee     //parent class  or base class or super class
{
    float salary=50000.00f;


}

//sub class or derived class or child class
class Programmer extends Employee
{
    double bonus=20000.00+salary;  //calculate the salary with bonus.


}

public class EmployeeDetails
{
    public static void main(String arg[])
    {
        Programmer obj=new Programmer();

        System.out.println("Employee Salary: "+obj.salary);
        System.out.println("Programmer Salary :"+obj.bonus);

    }

}



public class TriangleProgramRetrunType {

    public static void main(String args[])  
    {

       double area= Triangle1.areaTriangle(12.3,17.2);  //using class name  passing data to the return type method   

        System.out.println("Area of Triangle is :"+area);   

    }
}


  Interface


Program#1:
public interface Printable {
    public void printData();  //declare method
}

class Program implements Printable
{
    public void printData()  //define the method
    {
        System.out.println("Welcome to interface ");

    }
}

public class DataAccess {
    public static void main(String[] args)
    {
        Program obj=new Program();
        obj.printData();  //using object calling printData

    }
}


//method overloading
public class TestPolyProgram {

    public int add(int x,int y)
    {
        return x+y;
    }
    public int add(int x,int y, int z)
    {
        return x+y+z;
    }
    public float add(float x,float y)
    {
        return x*y;

    }
    public static void main(String[] arg)
    {

        TestPolyProgram pp=new TestPolyProgram();
        System.out.println("Add Two Number :"+pp.add(100,200));
        System.out.println("Add Three Number :"+pp.add(100,200,300));
        System.out.println("Multiply Two Number "+pp.add(5.5f,6.6f));
    }
}

Program#2:
package Interface;

interface Bank{
    float rateOfInterest();
}
class SBI implements Bank{
    public float rateOfInterest()
    {return 9.15f;}
}
class PNB implements Bank{
    public float rateOfInterest()
    {return 9.7f;}
}


public class TestInterface1 {
    public static void main(String[] args){
        Bank b=new PNB();  //upcasting
        System.out.println("ROI: "+b.rateOfInterest());
    }

}

